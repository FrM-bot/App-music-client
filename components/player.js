/* eslint-disable react-hooks/exhaustive-deps */
import Head from 'next/head'
import { useState, useEffect, useRef } from 'react'

import { Arrow } from '../svg/arrow'
import SVGPlay from '../svg/play'

import SvgOptios from 'svg/options'

import SvgRepeat from 'svg/repeat'

import SvgRamdom from 'svg/ramdom'

import SvgVolume from 'svg/volume'

import { GET_MUSIC } from 'services/getMusics'

export default function MusicPlayer({ musicName, queue, allMusics, setMusicHandler, removeMusicFromQueueHandler }) {
    const [timeSlide, setTimeSlide] = useState()
    const [duration, setDuration] = useState()
    // const [volumeSlide, setVolumeSlide] = useState(music.music.volume)
    // const [musicPlaying, setMusicPlaying] = useState(music)
    const [isRamdom, setIsRamdom] = useState(false)
    const [isRepeat, setIsRepeat] = useState(true)

    const refMusic = useRef(null)

    const [isPaused, setIsPaused] = useState()
    const [musicUrl, setMusicUrl] = useState('')

    const calculateTime = (duration) => {
        const minutes = Math.floor(duration / 60)
        const seconds = Math.floor(duration % 60)
        const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`
        return `${minutes}:${returnedSeconds}`
    }
    useEffect(() => {
        GET_MUSIC(musicName).then(setMusicUrl).catch(alert)
    }, [musicName])

    useEffect(() => {
        if (refMusic.current !== null) {
            if (!refMusic.current.paused) {
                const intervalId = setInterval(() => {
                    setTimeSlide(prevCount => prevCount + 1)
                }, 1000)
                return () => clearInterval(intervalId)
            } else {
                setTimeSlide(refMusic.current.currentTime)
            }
            if (refMusic.current.ended) {
                nextMusic(musicName, isRepeat, isRamdom)
                refMusic.current.currentTime = 0
                setTimeSlide(refMusic.current.currentTime)
            }
        }
    }, [isPaused, duration, timeSlide, musicName, isRepeat, isRamdom])

    // console.log({ music }, { musicPlaying })

    async function playPause(musicOnPlay) {
        if (isPaused) {
            await musicOnPlay.play()
            setIsPaused(musicOnPlay.paused)
        } else {
            musicOnPlay.pause()
            setIsPaused(musicOnPlay.paused)
        }
    }

    function pause(musicOnPlay) {
        musicOnPlay.music.pause()
        setIsPaused(musicOnPlay.music.paused)
    }

    const currentTimeHandler = (e) => {
        console.log(e.target.value)
        setTimeSlide(+e.target.value)
        refMusic.current.currentTime = +e.target.value
    }
    const currentVolumeHandler = (e) => {
        console.log(e.target.value)
        setVolumeSlide(+e.target.value)
        console.log(music.music.volume)
        music.music.volume = +e.target.value
    }
    const play = async (musicOnPlay) => {
        await musicOnPlay.play()
    }

    function initialState(musicRef) {
        play(musicRef)
        setIsPaused(musicRef.paused)
        setDuration(musicRef.duration)
        setTimeSlide(musicRef.currentTime)
        console.log({ music: musicRef })
    }

    const prevMusic = (musicNamePlaying, Repeat, Ramdom) => {
        const indexMusicPreviusPlaying = allMusics.indexOf(musicNamePlaying)
        Repeat && indexMusicPreviusPlaying === 0 ?
            (setMusicHandler(allMusics[allMusics.length - 1])) :
            (setMusicHandler(allMusics[indexMusicPreviusPlaying - 1]))

        Ramdom && setMusicHandler(allMusics[Math.floor(Math.random() * (allMusics.length - 1))])

    }

    const nextMusic = (musicNamePlaying, Repeat, Ramdom) => {
        if (queue.length > 0) {
            setMusicHandler(queue[0])
            removeMusicFromQueueHandler()
            initialState(refMusic.current)
            return
        }

        const indexMusicPreviusPlaying = allMusics.indexOf(musicNamePlaying)


        Repeat && indexMusicPreviusPlaying === allMusics.length - 1 ?
            (setMusicHandler(allMusics[0])) :
            (setMusicHandler(allMusics[indexMusicPreviusPlaying + 1]))

        Ramdom && setMusicHandler(allMusics[Math.floor(Math.random() * (allMusics.length - 1))])
    }

    // console.log(refMusic, musicUrl)

    if (refMusic.current === null) {
        return <div>loading</div>
    }

    return (
        <>
            <Head>
                <title>{musicName}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {refMusic ?
                <div className='card-player-container'
                    onLoadedData={() => initialState(refMusic.current)}
                >
                    {
                        musicUrl &&
                        (<div
                            className='card--player'
                            >

                            <audio src={musicUrl} ref={refMusic}/>
                            <input type="range" className='slider-music' defaultValue={timeSlide} value={timeSlide} onChange={currentTimeHandler} min={0} max={duration} />


                            <div className='flex space-between align-center md-column'>
                                <div className='flex space-between gap-1 align-center'>
                                    <div className='md-none'>
                                        <span>
                                            {
                                                calculateTime(timeSlide)
                                            }
                                        </span>
                                        <span>
                                           /
                                        </span>
                                        <span>
                                            {
                                                calculateTime(refMusic?.current?.duration)
                                            }
                                        </span>
                                    </div>

                                    <div className='flex gap-1'>
                                        <button
                                            className='button prev'
                                            onClick={() => {
                                                // pause(music)
                                                prevMusic(musicName, isRepeat, isRamdom)
                                            }}>

                                            <Arrow />
                                        </button>
                                        <button
                                            className='button'
                                            onClick={() => playPause(refMusic.current)}
                                        >
                                            {
                                                isPaused ? 'Play' : 'Pause'
                                            }
                                        </button>
                                        <button
                                            className='button'
                                            onClick={() => {
                                                // pause(music)
                                                nextMusic(musicName, isRepeat, isRamdom)
                                            }}>
                                            <Arrow />
                                        </button>
                                    </div>
                                    <button
                                    // onMouseEnter={() => setisHoverBtn(true)}
                                    // onClick={() => setisHoverBtn(!isHoverBtn)}
                                    // className={isHoverBtn ? 'button active' : 'button'}
                                    className='button md-show'
                                >
                                    <SvgOptios />
                                </button>
                                </div>
                                <span
                                    className='name-music'
                                >
                                    {musicName}
                                </span>
                                <button
                                    // onMouseEnter={() => setisHoverBtn(true)}
                                    // onClick={() => setisHoverBtn(!isHoverBtn)}
                                    // className={isHoverBtn ? 'button active' : 'button'}
                                    className='button md-none'
                                >
                                    <SvgOptios />
                                </button>
                            </div>
                        </div>)

                    }
                </div>
                :
                <div>Loading</div>
            }
        </>
    )

    return (
        <>
            <Head>
                <title>{music.name}</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <div className='card-player-container'>
                {
                    music ?
                        <div
                            className='card-player'
                            onLoadedData={() => play(music)}
                        >
                            <div
                                className='p-2'
                            >

                                <input type="range" className='slider-music' defaultValue={0} onPlay={() => console.log('play')} value={timeSlide} onChange={currentTimeHandler} min={0} max={music.music.duration} />
                                <div className='flex space-between align-center gap-1'>


                                    <audio src={`./musics/${music.name}`} />
                                    <div className='flex align-center gap-1'>
                                        <div className='md-none mr-1'>

                                            <span>{calculateTime(timeSlide)}</span>
                                            <span>/</span>
                                            <span>{calculateTime(music.music.duration)}</span>
                                        </div>
                                        <div className='flex gap-1'>
                                            <button
                                                className='button prev'
                                                onClick={() => {
                                                    pause(music)
                                                    prevMusic(music.name, isRepeat, isRamdom)
                                                }}>

                                                <Arrow />
                                            </button>

                                            <button
                                                className='button'
                                                onClick={() => playPause(music)}
                                            >{
                                                    isPaused ? 'Play' : 'Pause'
                                                }</button>
                                            <button
                                                className='button'
                                                onClick={() => {
                                                    pause(music)
                                                    nextMusic(music.name, isRepeat, isRamdom)
                                                }}>
                                                <Arrow />
                                            </button>
                                        </div>
                                    </div>
                                    <a href={`#${music.name}`} className='name-music'>{music.name}</a>
                                    <div className='flex gap-1 options-container md-column'>
                                        <div className='flex gap-1 options ml-1 '
                                            onMouseLeave={() => setisHoverBtn(false)}
                                            style={{ width: isHoverBtn ? 'auto' : 0 }}
                                        >
                                            <div>
                                                <button
                                                    onClick={() => setIsRepeat(!isRepeat)}
                                                    className={isRepeat ? 'button active' : 'button'}
                                                >
                                                    <SvgRepeat />
                                                </button>
                                            </div>
                                            <div>
                                                <button
                                                    onClick={() => setIsRamdom(!isRamdom)}
                                                    className={isRamdom ? 'button active' : 'button'}
                                                >
                                                    <SvgRamdom />
                                                </button>
                                            </div>
                                            <div className='flex container-vol'>
                                                <input
                                                    style={{ width: showVol ? 'auto' : '0' }}
                                                    value={volumeSlide}
                                                    onChange={currentVolumeHandler}
                                                    defaultValue={music.music.volume}
                                                    type='range' step={0.05}
                                                    min={0}
                                                    max={1}
                                                    className='slider-vol'
                                                ></input>
                                                <button className='button'
                                                    onMouseEnter={() => setShowVol(true)}
                                                    onClick={() => setShowVol(!showVol)}
                                                >
                                                    <SvgVolume />
                                                </button>
                                            </div>
                                        </div>
                                        <button
                                            onMouseEnter={() => setisHoverBtn(true)}
                                            onClick={() => setisHoverBtn(!isHoverBtn)}
                                            className={isHoverBtn ? 'button active' : 'button'}
                                        >
                                            <SvgOptios />
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div> : <div>loadin</div>
                }
            </div>

            <footer>
            </footer>
        </>
    )
}
